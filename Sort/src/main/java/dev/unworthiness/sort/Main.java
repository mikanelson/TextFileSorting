package main.java.dev.unworthiness.sort;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;


/**
 * Custom comparator used to sort elements of a collection by their length.
 * 
 * @author mn
 * @version 1.3
 * @since 1.0
 */
class SortByLengthAscending implements Comparator<String> {
  /**
   * Returns the difference in the length between two strings
   * 
   * @param stringOne the first string.
   * @param stringTwo the string being compared.
   * @return string one's length minus string two's length.
   */
  public int compare(String stringOne, String stringTwo) {
      return stringOne.length() - stringTwo.length();
  }
}

/**
 * Custom comparator used to sort elements of a collection by their length.
 * 
 * @author mn
 * @version 1.3
 * @since 1.3
 */
class SortByLengthDescending implements Comparator<String> {
  /**
   * Returns the difference in the length between two strings
   * 
   * @param stringOne the first string.
   * @param stringTwo the string being compared.
   * @return string two's length minus string one's length.
   */
  public int compare(String stringOne, String stringTwo) {
      return stringTwo.length() - stringOne.length();
  }
}

/**
 * Contains all logic for importing a list from a file, sorting the list, and 
 * then writing the list to another file.
 * 
 * @author mn
 * @version 1.3
 * @since 1.0
 */
public class Main {
  /**
   * Prompts the user for the path to their file then escapes all \ characters.
   * @return filePath the path to the file with \ escaped.
   */
  private static String requestFilePath() {
    System.out.println("Please provide a file path:");
    Scanner in = new Scanner(System.in);
    String filePath = in.nextLine().replace("\\", "\\\\");
    filePath = filePath.replace('"', ' ').trim();
    filePath.replace("\"","");
    in.close();
    return filePath;
  }

  /**
   * Retrieves a file from a specified file path. This might as well be legacy
   * code, as far as the tests are concerned.
   * 
   * @param filePath the path to the file.
   * @return file the File generated by the filePath.
   */
  private static File retrieveFile(String filePath) {
    File file = null;
    try {
      file = new File(filePath);
    } catch (NullPointerException fileNotFound) {
      System.out.println("Error retrieving file.");
    }
    return file;
  }
  
  /**
   * Reads a file and generates a list where each line is an element.
   * 
   * @param namesFile the file to be read from.
   * @return parsedData A list of strings where each line read is an element of the list.
   * @throws Exception if there is an error reading the provided file.
   */
  private static List<String> importData(File namesFile) throws Exception {
    BufferedReader br = new BufferedReader(new FileReader(namesFile));
    List<String> parsedData = new LinkedList<String>();
    String fileLine;
    while ((fileLine = br.readLine()) != null) {
      parsedData.add(fileLine.trim());
    }
    return parsedData;
  }

  /**
   * Writes a collection to a file with each element of the collection being written on a new line.
   * 
   * @param <T> the type parameter.
   * @param toWrite the collection to write to the file.
   * @throws Exception if there is an error writing the collection to a file.
   */
  private static <T> void writeCollectionToFile(Collection<T> toWrite, String fileName) throws Exception {
    BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
    Iterator i = toWrite.iterator(); 
    while (i.hasNext()) {
      String line = (String) i.next();
      if (!line.equals("")) {
        writer.write(line + System.getProperty("line.separator")); 
      }      
    }
    writer.close();
  }

  /**
   * Sorts a list of strings from smallest to largest length.
   * 
   * @param toSort the list to sort.
   * @param sortType a for ascending, anything else for descending
   */
  private static void sortListBySize(List<String> toSort, char sortType) {
    if (sortType == 'a') {
      Collections.sort(toSort, new SortByLengthAscending());
    } else {
      Collections.sort(toSort, new SortByLengthDescending());
    }   
  }

  /**
   * Sorts a section of a list of strings alphabetically.
   * 
   * @param toSort the list to sort.
   */
  private static void sortListAlphabetically(List<String> toSort) {
    Collections.sort(toSort);
  }
  
  /**
   * Main logic for the program.
   * 
   * <p>
   * Prompts the user for a file path, then attempts to read each line of the file into
   * a list. If this is successful, the list is sorted by size and then alphabetically for each
   * size. The list is then written to a text file as output.
   * </p>
   * 
   * @param sortType a for ascending, anything else for descending
   */
  private static void sortListSizeAlphabetically(char sortType, String fileName) {
    File nameList = retrieveFile("Sort Me.txt");
    List<String> namesTrimmed = null;
    try {
      namesTrimmed = importData(nameList);
      sortListBySize(namesTrimmed, sortType);
      // compares each word with the words of the same size after it
      for (int selectedWord = 0; selectedWord < namesTrimmed.size() - 1; selectedWord++) {
        for (int comparedWord = selectedWord + 1; comparedWord < namesTrimmed.size(); comparedWord++) {
          // if the word is a longer length, sort all the words the same size as the selected word
          // aka all words from selected and before compared
          if (namesTrimmed.get(comparedWord).length() > namesTrimmed.get(selectedWord).length()) {
            sortListAlphabetically(namesTrimmed.subList(selectedWord, comparedWord));
            break;
          }
        }
      } 
    } catch (Exception e) {
      System.out.println("Error reading file.");
      e.printStackTrace();
    }
    try {
      writeCollectionToFile(namesTrimmed, fileName);
    } catch (Exception e) {
      System.out.println("Error printing file.");
      e.printStackTrace();
    }
    System.out.println("Program has finished.");
  }
  
  /**
   * Calls the method responsible for main logic.
   * 
   * @param args Default.
   */
  public static void main(String[] args) {
    // sanity checks
    char sortType = 'd';
    String fileName = "sortedcollection.txt";
    if (args.length == 2) {
      sortType = args[0].toLowerCase().charAt(0);
      fileName = args[1];
    } else {
      System.out.println("Invalid number of arguments provided. Assuming descending sort.");
    }
    sortListSizeAlphabetically(sortType, fileName);
  }
}